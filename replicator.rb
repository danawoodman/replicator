# To run this, type: rails new blog -m app_template.rb

# helper methods
def say_something(text)
  say "\033[1m\033[36m#{text}\033[0m"
end

# ask some questions
use_mongo = yes?("Do you want to use MongoDB instead of PostgreSQL?") ? true : false
use_devise = yes?("Do you want to use Devise for authentication?") ? true : false

# before installing gems, setup and use RVM
create_file ".rvmrc" do
  say_something "Creating .rvmrc file"
  require "rvm"
  RVM.gemset_create @app_name
  # %W{if [[ -s "~/.rvm/environments/ruby-1.9.3-p362@#{@app_name}" ]] ; then
  #   . "~/.rvm/environments/ruby-1.9.3-p362@#{@app_name}"
  # else
  #   rvm --create use  "ruby-1.9.3-p362@#{@app_name}"}
  RVM.gemset_use! @app_name
end

# install gems
gem "slim"
gem "cancan"
gem "rolify"
gem "unicorn"
gem "rabl"

if use_mongo
  gem "mongoid"
  # append_to_file "README.md" do
  #   "Make sure to set `MONGOLAB_URI` config variable if using Heroku"
  # end
else
  gem "pg"
end

if use_devise
  gem "devise"
end

gem_group :assets do
  gem "compass"
  gem "neat"
end

gem_group :development do
  gem "quiet_assets"
  gem "better_errors"
  gem "rb-inotify", require: false
  gem "rb-fsevent", require: false
  gem "rb-fchange", require: false
end

gem_group :test, :development do
  gem "rspec-rails"
  gem "guard-rspec"
  gem "guard-spork"
  gem "factory_girl_rails", require: false
end

gem_group :test do
  gem "database_cleaner"
  gem "capybara"
  gem "shoulda-matchers"
  gem "json_spec"
  gem "email_spec"
  if use_mongo
    gem "mongoid-rspec"
  end
end

run "bundle install"

if use_devise
  say_something "Setup Devise"
  generate "devise:install"
  route %W{devise_scope :user do
    get "login", :to => "devise/sessions#new"
    delete "logout", to: "devise/sessions#destroy"
    get "signup", to: "devise/registrations#new"
  end}
  generate "devise", "user"
end

# initializers
initializer "rolify.rb" do
%W{Rolify.configure do |config|
  # By default ORM adapter is ActiveRecord. uncomment to use mongoid
  # config.use_mongoid
  
  # Dynamic shortcuts for User class (user.is_admin? like methods). Default is: false
  # Enable this feature _after_ running rake db:migrate as it relies on the roles table
  # config.use_dynamic_shortcuts
end}
end
initializer "rabl_config.rb" do
  %W{Rabl.configure do |config|
  config.include_json_root = false
end}  
end

# post install hooks
generate "rspec:install"

# stripe?


# use lvh.me as the domain for development and testing
application nil, env: [:development, :test] do
  "config.host = \"lvh.me\""
end

# setup guard
create_file "Guardfile" do
  %W{guard "spork", :rspec_env => { "RAILS_ENV" => "test" } do
    watch("config/application.rb")
    watch("config/environment.rb")
    watch("config/environments/test.rb")
    watch(%r{^config/initializers/.+\.rb$})
    watch("Gemfile")
    watch("Gemfile.lock")
    watch(%r{^spec/support/(.+)\.rb$})
    watch("spec/spec_helper.rb") { :rspec }
    watch(%r{^factories/(.+)\.rb$}) { :rspec }
  end

  guard "rspec", :cli => "--drb --color -fd" do
    watch(%r{^spec/.+_spec\.rb$})
    watch("spec/spec_helper.rb") { "spec" }
    watch(%r{^app/(.+)\.rb$}) { "spec" }
    watch(%r{^app/(.*)(\.erb|\.haml|\.slim)$}) { "spec" }
    watch(%r{^app/controllers/(.+)_(controller)\.rb$}) { "spec" }
    watch(%r{^spec/support/(.+)\.rb$}) { "spec" }
    watch("config/routes.rb") { "spec" }
  end}
end # TODO: replace with template

# heroku setup
create_file "Procfile" do
  %W{web: bundle exec unicorn -p $PORT -E $RACK_ENV} # TODO: replace with template
end

# setup rspec
remove_file ".rspec"
create_file ".rspec" do
  %W{--color
--format progress
--profile
}
end

# append_file "config/database.yml"

# run "cp config/database.yml config/example_database.yml"

# add license file

# setup static pages controller and routes
generate :controller, "static_pages home"
route "root to: \"static_pages#home\""
remove_file "public/index.html"

# cleanup
remove_file "README.rdoc"
create_file "README.md" do
  %W{# #{@app_name}
  }
end
remove_dir "test"

# setup git
git :init
remove_file ".gitignore"
create_file ".gitignore" do
  %W{# bundler state
  /.bundle
  /vendor/bundle/
  /vendor/ruby/

  # minimal Rails specific artifacts
  db/*.sqlite3
  /log/*
  /tmp/*

  # various artifacts
  **.war
  *.rbc
  *.sassc
  .rspec
  .redcar/
  .sass-cache
  /config/config.yml
  /config/database.yml
  /coverage.data
  /coverage/
  /db/*.javadb/
  /db/*.sqlite3
  /doc/api/
  /doc/app/
  /doc/features.html
  /doc/specs.html
  /public/cache
  /public/stylesheets/compiled
  /public/system/*
  /spec/tmp/*
  /cache
  /capybara*
  /capybara-*.html
  /gems
  /specifications
  rerun.txt
  pickle-email-*.html

  # If you find yourself ignoring temporary files generated by your text editor
  # or operating system, you probably want to add a global ignore instead:
  #   git config --global core.excludesfile ~/.gitignore_global
  #
  # Here are some files you may want to ignore globally:

  # scm revert files
  **.orig

  # Mac finder artifacts
  .DS_Store

  # Netbeans project directory
  /nbproject/

  # RubyMine project files
  .idea

  # Textmate project files
  /*.tmproj

  # vim artifacts
  **.swp

  # Ignore application configuration
  /config/application.yml

  # Ignore Heroku environment file
  .env}
end # TODO: replace with template
git add: ".", commit: "-m 'initial commit'"
